#!/usr/bin/env bash
# -----------------------------------------------------------------------------
#
# Usage: ./postgres-up [COMMAND] [POSTGRES ARGS ...]
#
# If COMMAND is 'postgres' or is  missing, creates a self-contained Postgres
# instance in a local directory and starts a server listening on a UNIX
# socket in that directory.
#
# If COMMAND is any other Postgres command (e.g., 'psql' 'pg_restore'), runs
# that command configured to talk to the server started above.
#
# Any additional arguments are passed directly to the Postgres command.
#
# Looks for an optional `postgres-up.config` file in the same directory as this
# script which can define the following shell variables:
#
#   postgres_data_dir   :  directory in which to create database, relative to
#                          config file (default: ./pgdata)
#
#   postgres_version    :  require a specific version of Postgres (if none
#                          specified will use the first version found)
#
#   postgres_bin_path   :  list of directories in which to look for Postgres
#
#   <COMMAND_NAME>_args : sets default arguments for named Postgres command
#
# For further details see: http://postgres-up.evans.io
#
# -----------------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2013 David Evans
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# -----------------------------------------------------------------------------

set -eo pipefail

# Output functions
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
normal=$(tput sgr0)
function error (){ echo "$red$@$normal" 1>&2; }
function warn (){ echo "$yellow$@$normal" 1>&2; }
function confirm (){ echo "$green$@$normal" 1>&2; }

# Change into this script's directory
unset CDPATH
original_dir="$PWD"
cd "$(dirname "$BASH_SOURCE[0]")"

# Set default data dir (if not already set)
: ${postgres_data_dir:="./pgdata"}

# Command is first argument, unless first argument is missing or is
# an option (i.e. starts with '-')
command="$1"
if [ -z "$command" -o "${command:0:1}" == '-' ]; then
  command='postgres'
else
  shift
fi

# The 'postgres' command (which creates/starts db) gets much
# more complex treatment later on; here we handle the simpler
# commands which assume an already created db
if [ "$command" != 'postgres'  ]; then
  # Get config if it exists
  if [ -e 'postgres-up.config' ]; then
    source postgres-up.config
  fi
  # Check the database has been created
  if [ ! -e "$postgres_data_dir/postmaster.opts" ]; then
    error "You must run $0 to start the database before running any other commands"
    exit 1
  fi
  # Normalize the path
  postgres_data_dir=$(cd "$postgres_data_dir" && pwd)

  # postmaster.opts contains the last command run to start the server so
  # we can use that to determine the directory containing other binaries
  postmaster_cmd_array=( $(cat "$postgres_data_dir/postmaster.opts") )
  postgres_bin_dir=$(dirname "$postmaster_cmd_array[0]")

  # Default arguments are configured by variables of the form
  # <command_name>_args (e.g., pg_restore_args)
  default_arg_var_name="${command}_args"
  default_args=${!arg_var_name}

  export PGHOST="$postgres_data_dir"
  export PGDATA="$postgres_data_dir"
  export PGDATABASE='postgres'
  export PGUSER='postgres'

  # Extra default argument for pg_restore which requires the
  # database to be explicity specified (other commands will
  # just use PGDATABASE variable)
  [ "$command" == 'pg_restore' ] && default_args="--dbname=$PGDATABASE $default_args"

  # Run the command
  cd "$original_dir"
  exec "$postgres_bin_dir/$command" $default_args $@
fi



function show_install_hint (){
  version="$1"
  [ -n "$version" ] && version_suffix="-$version" || version_suffix=''
  # Debian/Ubuntu
  if [ -f /etc/debian_version ]; then
    warn "Try running: sudo apt-get install postgresql$version_suffix"
  # OS X
  elif [ $(uname) == "Darwin" ]; then
    warn "Try installing Postgres$version_suffix from http://postgresapp.com/"
  # Fallback
  else
    warn "See: http://www.postgresql.org/download/"
  fi
}

# Set default paths to search for Postgres
postgres_bin_path="$PATH"
# On Ubuntu, postgres isn't on PATH by default, but pg_config is so check that
pg_config_dir=$(pg_config --bindir 2>/dev/null || true)
if [ -n "$pg_config_dir" ]; then
  postgres_bin_path="$postgres_bin_path:$pg_config_dir"
fi
# Standard locations for Ubuntu Postgres
for usr_lib_path in $(shopt -s nullglob; echo /usr/lib/postgresql/*/bin); do
   postgres_bin_path="$postgres_bin_path:$usr_lib_path"
done
# Installation path for Postgres.app for users who have it installed but
# not added to PATH
postgres_bin_path="$postgres_bin_path:/Applications/Postgres.app/Contents/MacOS/bin"

# Get config
if [ -e 'postgres-up.config' ]; then
  confirm "Using settings from 'postgres-up.config'"
  source postgres-up.config
else
  confirm "No 'postgres-up.config' file found: using default settings"
fi

function get_postgres_version (){
  # Get the version (major.minor) of the Postgres binary
  "$1" --version | sed -nEe 's/^.* ([0-9]+\.[0-9]+)(\.[^ ]+)?$/\1/p'
}

# Search the path for a Postgres binary of the right version
postgres_bin=''
found_version=''
for match in $(PATH="$postgres_bin_path" which -a postgres || true); do
  found_version=$(get_postgres_version "$match")
  if [ -z "$postgres_version" -o "$found_version" == "$postgres_version" ]; then
    postgres_bin="$match"
    break
  fi
done

if [ -z "$postgres_bin" ]; then
  [ -z "$postgres_version" ] && target='binaries' || target="$postgres_version binaries"
  [ -z "$found_version" ] || target="$target (found $found_version instead)"
    error "Couldn't find Postgres $target, looked in:"
    (
      IFS=:
      for p in $postgres_bin_path; do
        error "  $p"
      done
    )
  show_install_hint "$postgres_version"
  exit 1
fi
postgres_bin_dir=$(dirname "$postgres_bin")

confirm "Using Postgres $found_version binaries in $postgres_bin_dir"

if [ ! -e "$postgres_data_dir" ]; then
  mkdir "$postgres_data_dir"
fi

# Normalize the path
postgres_data_dir=$(cd "$postgres_data_dir" && pwd)

# Note that this check won't work on OS X as it ships with a very different
# version of `df` but that's OK as it's very unlikely you'd be using OS X as
# a VirtualBox guest OS anyway
fs_type=$(
  ( df --print-type --portability "$postgres_data_dir" || true ) 2>/dev/null \
    | tail -n 1 | awk '{print $2}')
if [ "$fs_type" == "vboxfs" ]; then
  error "You are running Postgres out of the VirtualBox shared filesystem"
  error "This probably won't work very well!"
fi

# Only create a new database in an empty directory: we don't want to
# accidentally overwrite things
if [ ! "$(ls -A "$postgres_data_dir")" ]; then
  confirm "Creating new Postgres database in $postgres_data_dir"
  # Create the database cluster
  "$postgres_bin_dir/initdb" \
    --username="postgres" \
    --pgdata="$postgres_data_dir" \
    $initdb_args
else
  confirm "Found existing database in $postgres_data_dir"
fi

# A bunch of helpful tips
confirm
confirm "- To create a new database just delete or move this directory"
confirm "  To make a copy, just use cp -r (with the server stopped)"
confirm
confirm "- To export this connection string:"
confirm "  export DATABASE_URL='postgres://postgres@localhost/postgres?host=$postgres_data_dir'"
confirm
confirm "- To get more vebose logging output re-run this command with:"
confirm "  $0 -d 2"
confirm
confirm "- To connect to this database with the CLI client:"
confirm "  $0 psql"
confirm
confirm "- To load a database dump:"
confirm "  $0 pg_restore <path/to/dumpfile>"
confirm

# Run postgres server: setting `listen-addresses` to empty
# prevents server trying to open a TCP port
cd "$original_dir"
exec "$postgres_bin" \
  --listen-addresses='' \
  --unix-socket-directory="$postgres_data_dir" \
  -D "$postgres_data_dir" \
  $postgres_args $@
